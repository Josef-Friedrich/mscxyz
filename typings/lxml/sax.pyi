"""
This type stub file was generated by pyright.
"""

from xml.sax.handler import ContentHandler
from lxml import etree

"""
SAX-based adapter to copy trees from/to the Python standard library.

Use the `ElementTreeContentHandler` class to build an ElementTree from
SAX events.

Use the `ElementTreeProducer` class or the `saxify()` function to fire
the SAX events of an ElementTree against a SAX ContentHandler.

See http://codespeak.net/lxml/sax.html
"""
class SaxError(etree.LxmlError):
    """General SAX error.
    """
    ...


class ElementTreeContentHandler(ContentHandler):
    """Build an lxml ElementTree from SAX events.
    """
    def __init__(self, makeelement=...) -> None:
        ...
    
    etree = ...
    def setDocumentLocator(self, locator): # -> None:
        ...
    
    def startDocument(self): # -> None:
        ...
    
    def endDocument(self): # -> None:
        ...
    
    def startPrefixMapping(self, prefix, uri): # -> None:
        ...
    
    def endPrefixMapping(self, prefix): # -> None:
        ...
    
    def startElementNS(self, ns_name, qname, attributes=...):
        ...
    
    def processingInstruction(self, target, data): # -> None:
        ...
    
    def endElementNS(self, ns_name, qname): # -> None:
        ...
    
    def startElement(self, name, attributes=...): # -> None:
        ...
    
    def endElement(self, name): # -> None:
        ...
    
    def characters(self, data): # -> None:
        ...
    
    ignorableWhitespace = ...


class ElementTreeProducer:
    """Produces SAX events for an element and children.
    """
    def __init__(self, element_or_tree, content_handler) -> None:
        ...
    
    def saxify(self): # -> None:
        ...
    


def saxify(element_or_tree, content_handler): # -> None:
    """One-shot helper to generate SAX events from an XML tree and fire
    them against a SAX ContentHandler.
    """
    ...

